linux subversion 

安装：#	yum install subversion mod_dav_svn
查看安装位置：whereis subversion

1.建立版本库目录(可建立多个，新建库后以下各项都需重新配置。注意区别安装目录与版本库目录,以下讲的都是版本库目录)
mkdir /opt/svn/repos1

2. 建立svn版本库(与上面目录对应)
svnadmin create /opt/svn/repos1

3. 修改版本库配置文件
vi /opt/svn/repos1/conf/svnserve.conf

[general]
anon-access = none
auth-access = write
password-db = passwd  #用户密码文件
authz-db = authz  #授权登录文件

4 编辑/opt/svn/repos1/conf/authz，添加group和用户：
[groups]
admin = yang
[/]
@admin = rw

5 添加用户对应的密码：

编辑/svn/repos/conf/passwd，设置用户的密码：
[users]
yang = yang@123

这样，就设定了一个用户名和密码都是test的具有读写权限的账户。


6 启动SVN：

svnserve -d --listen-port 8888 -r /svn
###-d ：表示以daemon方式（后台运行）运行；
###--listen-port 9999 ：表示使用9999端口，可以换成你需要的端口。但注意，使用1024以下的端口需要root权限；
###-r /home/svndata ：指定根目录是/svn

7 SVN添加到开机启动：

如果想要停止SVN，可用以下命令：
killall svnserve


8 自动更新
在	vi /usr/local/svn/sunny/hooks/post-commit	中加入

#!/bin/sh
SVN=/usr/bin/svn  
WEB=/wwwroot/cpstatic
$SVN update $WEB --username xxx --password xxx 

其中SVN=右边改成 svn 命令位置 一般默认为/usr/bin/svn
        WEB=右边改成你实际的web目录
赋予可执行权限
chmod 777 /usr/local/svn/sunny/hooks/post-commit
安装完毕

---------------

开始搭建SVN版本控制：
1.安装svn服务器端
yum install subversion mod_dav_svn    //从镜像下载安装svn服务器端
cd /usr/local/                  //进入目录，准备创建svn目录
mkdir svn                      //创建一个svn目录
chmod -R 777 svn            //修改目录权限为777
svnadmin create /usr/local/svn/sunny  //创建一个svn版本仓库sunny(sunny可以随便起)
cd svn/sunny/conf               //进入sunny版本仓库下的配置文件目录


下面要修改这个目录下的三个配置文件
(1)vi svnserve.conf    //配置版本库信息和用户文件和用户密码文件的路径、版本库路径


把
# anon-access = read
# auth-access = write
# password-db = passwd
//这四行，前面的#号和空格去掉(注意去掉#要顶格写,不要留有多余空格)，变成
anon-access = none      //改成none
auth-access = write
password-db = passwd
realm = sunny           //改成自己的版本库
保存


(2)vi authz     //文件,创建svn组和组用户的权限
[group]
sunny = gep,wce //创建一个sunny的组，并指定两个用户gep和wce


[/]             //制定根目录下的权限
@sunny = rw     //sunny组用户权限为读写
* = r           //其他用户只有读权限
保存退出


(3) vi passwd   //创建或修改用户密码
[users]
gep = 123456    //用户名为gep的用户的密码为123456
wce = 123456    //。。。
保存退出




启动svn:
svnserve -d -r /usr/local/svn/     //这里采用多版本库的方式启动  如果是单版本库 可以svnserve -d -r /usr/local/svn/sunny

添加一行
然后要设置自启动
vi /etc/rc.local    打开自启动文件添加
/usr/bin/svnserve -d -r /usr/local/svn/

到此为止可以从服务端检出文件了.

svn命令：
netstat -tnl |grep :3690   查看svn是否启动
ps aux |grep 'svn'  查找所有svn启动的进程
kill -9 2505    杀死2505这个查找到的svn进程

svn checkout svn://192.168.50.35/sunny /wwwroot/cpstatic

检出一份版本库文件到指定目录（这里ip地址是安装Svn的服务器）//检出一份版本库文件到指定目录（这里ip地址是安装Svn的服务器）
svn up                        //更新文件

自动更新
在	vi /usr/local/svn/sunny/hooks/post-commit	中加入

#!/bin/sh
SVN=/usr/bin/svn  
WEB=/wwwroot/cpstatic
export LANG=zh_CN.GBK
$SVN update $WEB --username xxx --password xxx 




其中SVN=右边改成 svn 命令位置 一般默认为/usr/bin/svn
        WEB=右边改成你实际的web目录
赋予可执行权限
chmod 777 /usr/local/svn/sunny/hooks/post-commit
安装完毕




=========================================================================
其他操作


#svn commit -m "注释" xxx.php  //提交文件
svn ci -m'aaa' test.php       //提交文件


#svn add file               //新建文件并添加到svn
svn add *.php               //(添加当前目录下所有的php文件)
svn delete test.php         //删除test.php
svn log test.php            //查看test文件的log信息
svn cleanup                 //清理当前目录

----------------------

常用的SVN命令

　　1、将文件checkout到本地目录 
　　svn checkout path（path是服务器上的目录） 
　　例如：svn checkout svn://192.168.1.1/pro/domain 
　　简写：svn co 
　　2、往版本库中添加新的文件 
　　svn add file 
　　例如：svn add test.php(添加test.php) 
　　svn add *.php(添加当前目录下所有的php文件) 
　　3、将改动的文件提交到版本库 
　　svn commit -m “LogMessage“ [-N] [--no-unlock] PATH(如果选择了保持锁，就使用–no-unlock开关) 
　　例如：svn commit -m “add test file for my test“ test.php 
　　简写：svn ci 

　　note: 在提交(ci)之前一定要先进行版本的更新，否则会覆盖上一个提交（很可能在你开发过程中，你的同事已经进行了版本的更新）的版本！！！

　　ci的具体流程：

　　（1）进入修改的目录下，查看修改的信息：

　　　　svn diff

　　　　svn info

　　（2）将版本更新到最新版本：

　　　　svn up

　　（3）提交修改后的版本：

　　　　svn ci -m "comment"


　　4、加锁/解锁 
　　svn lock -m “LockMessage“ [--force] PATH 
　　例如：svn lock -m “lock test file“ test.php 
　　svn unlock PATH 


　　5、更新到某个版本 
　　svn update -r m path 
　　例如： 
　　svn update如果后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本。 
　　svn update -r 200 test.php(将版本库中的文件test.php还原到版本200) 
　　svn update test.php(更新，于版本库同步。如果在提交的时候提示过期的话，是因为冲突，需要先update，修改文件，然后清除svn resolved，最后再提交commit) 
　　简写：svn up 


　　6、查看文件或者目录状态 
　　1）svn status path（目录下的文件和子目录的状态，正常状态不显示） 
　　[?：不在svn的控制中；M：内容被修改；C：发生冲突；A：预定加入到版本库；K：被锁定]
　　2）svn status -v path(显示文件和子目录状态) 
　　第一列保持相同，第二列显示工作版本号，第三和第四列显示最后一次修改的版本号和修改人。 
　　注：svn status、svn diff和 svn revert这三条命令在没有网络的情况下也可以执行的，原因是svn在本地的.svn中保留了本地版本的原始拷贝。 
　　简写：svn st 


　　7、删除文件 
　　svn delete path -m “delete test fle“ 
　　例如：svn delete svn://192.168.1.1/pro/domain/test.php -m “delete test file” 
　　或者直接svn delete test.php 然后再svn ci -m ‘delete test file‘，推荐使用这种 
　　简写：svn (del, remove, rm) 


　　8、查看日志 
　　svn log path 
　　例如：svn log test.php 显示这个文件的所有修改记录，及其版本号的变化 


　　9、查看文件详细信息 
　　svn info path 
　　例如：svn info test.php 


　　10、比较差异 
　　svn diff path(将修改的文件与基础版本比较) 
　　例如：svn diff test.php 
　　svn diff -r m:n path(对版本m和版本n比较差异) 
　　例如：svn diff -r 200:201 test.php 
　　简写：svn di 


　　11、将两个版本之间的差异合并到当前文件 
　　svn merge -r m:n path 
　　例如：svn merge -r 200:205 test.php（将版本200与205之间的差异合并到当前文件，但是一般都会产生冲突，需要处理一下） 


　　12、SVN 帮助 
　　svn help 
　　svn help ci 
　　—————————————————————————— 
　　以上是常用命令，下面写几个不经常用的 
　　—————————————————————————— 
　　13、版本库下的文件和目录列表 
　　svn list path 
　　显示path目录下的所有属于版本库的文件和目录 
　　简写：svn ls 


　　14、创建纳入版本控制下的新目录 
　　svn mkdir: 创建纳入版本控制下的新目录。 
　　用法: 1、mkdir PATH… 
　　2、mkdir URL… 
　　创建版本控制的目录。 
　　1、每一个以工作副本 PATH 指定的目录，都会创建在本地端，并且加入新增 
　　调度，以待下一次的提交。 
　　2、每个以URL指定的目录，都会透过立即提交于仓库中创建。 
　　在这两个情况下，所有的中间目录都必须事先存在。 

　　15、恢复本地修改 
　　svn revert: 恢复原始未改变的工作副本文件 (恢复大部份的本地修改)。revert: 
　　用法: revert PATH… 
　　注意: 本子命令不会存取网络，并且会解除冲突的状况。但是它不会恢复被删除的目录。 
　
　16、代码库URL变更 
　　svn switch (sw): 更新工作副本至不同的URL。 　　
　　用法: 1、switch URL [PATH] 
　　2、switch –relocate FROM TO [PATH...] 
　　1、更新你的工作副本，映射到一个新的URL，其行为跟“svn update”很像，也会将服务器上文件与本地文件合并。这是将工作副本对应到同一仓库中某个分支或者标记的方法。 
　　2、改写工作副本的URL元数据，以反映单纯的URL上的改变。当仓库的根URL变动(比如方案名或是主机名称变动)，但是工作副本仍旧对映到同一仓库的同一目录时使用这个命令更新工作副本与仓库的对应关系。 


　　17、解决冲突 
　　svn resolved: 移除工作副本的目录或文件的“冲突”状态。 
　　用法: resolved PATH… 
　　注意: 本子命令不会依语法来解决冲突或是移除冲突标记；它只是移除冲突的相关文件，然后让 PATH 可以再次提交。 


　　18、输出指定文件或URL的内容。 
　　svn cat 目标[@版本]…如果指定了版本，将从指定的版本开始查找。 
　　svn cat -r PREV filename > filename (PREV 是上一版本,也可以写具体版本号,这样输出结果是可以提交的)